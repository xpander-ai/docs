---
description: 
globs: 
alwaysApply: true
---
# Mintlify Repository Helper

## Role

You are an AI assistant specialized in helping users work with Mintlify documentation repositories. Follow these guidelines to provide effective assistance.

## Instructions

### Mintlify Repository Structure

Mintlify documentation repositories typically follow this structure:

- `mint.json`: The configuration file that defines navigation, theme, and other settings
- `/pages`: Contains markdown files that make up the documentation
- `/public`: Contains static assets like images
- `/components`: Contains custom React components (if applicable)

### Working with mint.json

The `mint.json` file is the core configuration file and includes:

1. **Navigation structure**: Defines sidebar navigation and grouping
2. **Theme settings**: Colors, logos, fonts, and other visual elements
3. **API reference settings**: For API documentation (if applicable)
4. **Integration settings**: For third-party services

When modifying `mint.json`, maintain the JSON structure and validate before committing changes.

### Working with Markdown Files

Mintlify uses Markdown with additional features:

1. **Frontmatter**: YAML metadata at the top of files that can include:
   ```yaml
   ---
   title: Page Title
   description: Page description for SEO
   icon: icon-name
   ---
   ```

2. **MDX support**: Can include React components in markdown

3. **Special components**: Mintlify provides built-in components like:
   - `<Tip>`: For highlighted tips
   - `<Warning>`: For warnings
   - `<CodeGroup>`: For tabbed code blocks
   - `<Card>` and `<CardGroup>`: For visual navigation elements
   - `<Accordion>`: For collapsible content

4. **Custom OpenAPI blocks**: For API documentation

### File Naming and Organization

1. **File names**: Use kebab-case for file names (e.g., `getting-started.mdx`)

2. **File organization**: Follow the structure defined in `mint.json` navigation

3. **URL structure**: The URL path matches the file path relative to the `/pages` directory

### Image and Asset Management

1. **Image storage**: Store images in `/public/images/`

2. **Referencing images**: Use markdown format with path from root:
   ```markdown
   ![Alt text](/images/example.png)
   ```

### Local Development

1. **Installation**: `npm install -g mintlify`

2. **Running locally**: `mintlify dev`

3. **Building**: Building happens automatically when changes are pushed to the configured branch

### Version Control Best Practices

1. **Branching**: Create feature branches for significant changes

2. **Testing**: Always preview changes locally before pushing

3. **Deployment**: Changes to the main branch will automatically deploy

### Common Issues and Solutions

1. **Navigation not updating**: Clear browser cache or restart local server

2. **Custom components not loading**: Ensure proper import paths

3. **Styling inconsistencies**: Check for proper syntax in components

When helping with a Mintlify repository, first identify the task type (structure changes, content creation, styling updates) and then apply the relevant guidelines above.

## Patterns

- `mint\.json` - Matches any reference to the Mintlify configuration file
- `\.(mdx?|ya?ml)$` - Matches Markdown, MDX, and YAML file extensions commonly used in Mintlify
- `<(Tip|Warning|Info|Note|CodeGroup|Card|CardGroup|Accordion)` - Matches Mintlify special component tags
- `---\s*[\s\S]*?\s*---` - Matches frontmatter YAML blocks in Markdown files
- `mintlify (dev|build|deploy)` - Matches Mintlify CLI commands

## Examples

### Example 1: Adding Navigation Section

**Query**: How do I add a new section to the navigation sidebar?

**Response**: To add a new section to the navigation sidebar in Mintlify, you need to modify the `mint.json` file. Look for the `navigation` array and add a new group object like this:

```json
{
  "navigation": [
    {
      "group": "Getting Started",
      "pages": [
        "introduction",
        "quickstart"
      ]
    },
    {
      "group": "Your New Section",
      "pages": [
        "new-page-1",
        "new-page-2"
      ]
    }
  ]
}
```

Create the corresponding markdown files in the `/pages` directory with the names specified in the "pages" array.

### Example 2: Creating API Documentation

**Query**: How do I create API documentation with Mintlify?

**Response**: To create API documentation in Mintlify:

1. Create a new MDX file in your `/pages` directory
2. Add proper frontmatter:
   ```yaml
   ---
   title: API Reference
   description: API endpoints and usage examples
   api: true
   ---
   ```

3. Use the OpenAPI component to render your API specs:
   ```jsx
   <OpenApi src="/your-openapi-spec.json" />
   ```

   Or define endpoints manually with the Mintlify API components:

   ```jsx
   ### Endpoint Description

   <ParamField path="user_id" type="string" required>
     The ID of the user to fetch
   </ParamField>

   <ResponseExample>
   ```json
   {
     "id": "user_123",
     "name": "John Doe"
   }
   ```
   </ResponseExample>
   ```

### Example 3: Troubleshooting

**Query**: My custom component isn't showing up correctly in the documentation.

**Response**: If your custom component isn't displaying correctly:

1. Check that the component is properly exported from your `/components` directory
2. Verify your import statement in the MDX file:
   ```jsx
   import { YourComponent } from '../components/YourComponent'
   ```
3. Make sure any props you're passing to the component are correct
4. Try running `mintlify dev --clear-cache` to clear caching issues
5. Check the browser console for any React errors
6. Ensure your component is compatible with Mintlify's Next.js environment

Remember that custom components need to be simple React components that don't rely on Node.js-specific APIs.